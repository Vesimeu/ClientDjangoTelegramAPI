import uuid
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.web_app_info import WebAppInfo
import json
# from ... import views
from django.http import HttpResponse
from channels.db import database_sync_to_async
import logging
logging.basicConfig(level=logging.INFO)
from django.core.management import BaseCommand
from asgiref.sync import sync_to_async
import urllib3
urllib3.disable_warnings() # disable ssl warning

main_url = '127.0.0.1:8000'

logging.basicConfig(level=logging.INFO)


from myshop import settings
from mainshop.models import User, Order, Executor


class Command(BaseCommand):
    help = 'Это телеграмм бот для пользователей. Сделать клиент получает уведомление о его заказе. Может авторизоваться и зарегестрироваться на сайт..'

    def handle(self, *args, **options):
        bot_token = settings.TOKEN_BOT_CLIENT
        telegram_bot = TelegramBot(bot_token)
        telegram_bot.start_bot()

class TelegramBot:
    def __init__(self, bot_token):
        self.bot = Bot(token=bot_token)
        self.dp = Dispatcher(self.bot)
        self.dp.middleware.setup(LoggingMiddleware())

        # Регистрация обработчиков команд
        self.dp.register_message_handler(self.start, commands=['start'])
        self.dp.register_message_handler(self.auth, commands=['auth'])
        self.dp.register_message_handler(self.reg, commands=['reg'])

        self.dp.register_callback_query_handler(self.handle_callback, lambda c: True)

        self.dp.register_message_handler(self.show_orders, commands=['my_orders'])
        self.dp.register_message_handler(self.handle_go_to_site, commands=['go_to_site'])


    async def handle_callback(self, query: types.CallbackQuery):
        logging.info(f"Callback data received: {query.data}")
        print("da")
        data = query.data.split(':')
        action = data[0]
        if action == 'registration':
            await self.handle_registration(query.message)
        elif action == 'accept_order':
            order_id = int(data[1])
            await self.handle_accept_order(query.message, order_id)
        elif action == 'reject_order':
            order_id = int(data[1])
            await self.handle_reject_order(query.message, order_id)
        await query.answer()  # Обязательно отвечайте на callback, чтобы убрать "крутящийся" индикатор в Telegram

    async def handle_accept_order(self, message: types.Message, order_id: int):
        await message.answer(f"Вы приняли заказ {order_id}.")

    async def handle_reject_order(self, message: types.Message, order_id: int):
        order = await sync_to_async(Order.objects.get)(id=order_id)
        order.accepted = False
        await sync_to_async(order.save)()
        await message.answer(f"Вы отклонили заказ {order_id}.")

    async def show_orders(self, message: types.Message):
        user_id = message.from_user.id
        orders = await self.get_all_orders(user_id)

        if orders:
            for order in orders:
                order_text = f"Заказ ID: {order.id}\nОписание: {order.description}\n"
                if order.accepted:
                    executor_info = await self.get_executor_info(order.id_executor)
                    if executor_info:
                        order_text += f"Фрилансер: {executor_info['username']}\nИнформация: {executor_info['information']}\n"
                    accept_button = InlineKeyboardButton("Принять", callback_data=f'accept_order:{order.id}')
                    reject_button = InlineKeyboardButton("Отклонить", callback_data=f'reject_order:{order.id}')
                    keyboard = InlineKeyboardMarkup().add(accept_button, reject_button)
                else:
                    keyboard = None

                await self.bot.send_message(chat_id=message.chat.id, text=order_text, reply_markup=keyboard)
        else:
            await message.answer("У вас нет заказов.")

    async def start(self, message: types.Message):
        user_id = message.from_user.id
        user = await sync_to_async(User.objects.filter)(telegram_id=user_id)
        user = await sync_to_async(lambda queryset: queryset.first())(user)

        if user:
            await message.answer("Вы уже зарегистрированы.")
            await self.auth(message)
        else:
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton("Регистрация", callback_data='registration')
            keyboard.add(button)
            await message.answer("Привет! Для регистрации нажмите на кнопку ниже.", reply_markup=keyboard)

    async def auth(self, message: types.Message):
        user_id = message.from_user.id
        user = await sync_to_async(User.objects.filter)(telegram_id=user_id)
        user = await sync_to_async(lambda queryset: queryset.first())(user)

        if user:
            # token = self.generate_token(user_id)
            await self.handle_go_to_site(message)
        else:
            await message.answer("Вы еще не зарегистрированы.")

    async def reg(self, message: types.Message):
        user_id = message.from_user.id
        user = await sync_to_async(User.objects.filter)(telegram_id=user_id)
        user = await sync_to_async(lambda queryset: queryset.first())(user)

        if user:
            await self.auth(message)  # Перенаправляем на авторизацию, если пользователь уже зарегистрирован
        else:
            await self.handle_registration(message)  # Регистрируем, если пользователь не зарегистрирован


    async def handle_registration(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username  # Получаем username из сообщения

        # Создаем пользователя с telegram_id и username
        user, created = await sync_to_async(User.objects.get_or_create)(
            telegram_id=user_id,
            defaults={'username': username}
        )

        if created:
            # Если пользователь был создан в базе данных, создаем и сохраняем токен
            token = self.generate_token(user_id)
            await sync_to_async(self.save_user_token)(user, token)

            # Отправляем данные на сервер Django
            await self.send_data_to_server(user_id, token, message.chat.id)
            await self.send_auth_link_message(message.chat.id, token)
        else:
            # Если пользователь уже существует, выводим сообщение об ошибке
            await message.answer("Ошибка: пользователь уже зарегистрирован.")


    async def handle_go_to_site(self, message: types.Message):
        await message.answer("Можете переходить на сайт!.")
        user_id = message.from_user.id
        token = self.generate_token(user_id)
        user = await sync_to_async(User.objects.filter)(telegram_id=user_id)
        user = await sync_to_async(lambda queryset: queryset.first())(user)

        if user:
            await sync_to_async(self.save_user_token)(user, token)
            await message.answer("Ваш токен успешно сохранен в базе данных")
        else:
            await message.answer("Ошибка: пользователь не найден в базе данных")

        await self.send_data_to_server(user_id, token, message.chat.id)
        await self.send_auth_link_message(message.chat.id, token)


    async def send_auth_link_message(self, chat_id, token):
        auth_link = f'https://{main_url}/telegram_auth/?token={token}'


        # Создаем клавиатуру
        keyboard = types.InlineKeyboardMarkup()

        # Добавляем кнопку "Авторизация"
        website_button = types.InlineKeyboardButton("Авторизация", url=auth_link)
        keyboard.add(website_button)

        # Добавляем кнопку "Open in WebApp"
        webapp_button = types.InlineKeyboardButton("Open in WebApp", web_app=WebAppInfo(url=auth_link))
        keyboard.row(webapp_button)  # Добавляем кнопку в ту же строку, что и кнопка "Авторизация"

        # Отправляем сообщение с клавиатурой
        await self.bot.send_message(chat_id=chat_id, text="Для авторизации перейдите по ссылке ниже:",
                                    reply_markup=keyboard)

    def generate_token(self, user_id):
        return uuid.uuid4().hex

    @database_sync_to_async
    def decline_order(self, order): #Изменить. Это функция для отмены заказа
        order.accepted = False
        order.save()

    @database_sync_to_async
    def get_executor_info(self, executor_id):
        try:
            executor = Executor.objects.get(telegram_id=executor_id)
            return {
                "username": executor.username,
                "information": executor.information
            }
        except Executor.DoesNotExist:
            return None
    @database_sync_to_async
    def get_all_orders(self, telegram_id):
        orders = Order.objects.filter(id_client=telegram_id)
        return list(orders)
    @database_sync_to_async #Изменить. Это функция для принятия заказа.
    def process_order(self, order):
        order.accepted = True
        order.save()

    @database_sync_to_async
    def save_user_token(self, user, token):
        user.token = token
        user.save()

    # @database_sync_to_async
    # def get_order(self, order_id):
    #     return Order.objects.get(id=order_id)


    async def send_data_to_server(self, user_id, token, chat_id):
        url = f'https://{main_url}/telegram_auth/'
        params = {'token': token}
        print("Request data:", params)
        response = requests.get(url, params=params , verify=False)
        print("Response status code:", response.status_code)

        if response.status_code == 200:
            user = await sync_to_async(User.objects.filter)(telegram_id=user_id)
            user = await sync_to_async(lambda queryset: queryset.first())(user)
            if user:
                print("Сохранил токен в базу данных")
                # user.token = token
                # user.save()
                await sync_to_async(self.save_user_token)(user, token)
                print("Данные успешно отправлены на сервер Django")
            else:
                print("Ошибка: пользователь не найден в базе данных")
                await self.send_auth_link_message(chat_id, token)
        else:
            print("Ошибка при отправке данных на сервер Django:", response.text)
            await self.send_auth_link_message(chat_id, token)

    def start_bot(self):
        executor.start_polling(self.dp, skip_updates=True)